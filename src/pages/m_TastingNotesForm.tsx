import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { supabase } from '../lib/supabase';
import Button from '../components/Button';
import Input from '../components/Input';
import MobileLayout from '../components/MobileLayout';
import Trackbar from '../components/Trackbar';
import ColorSelector from '../components/ColorSelector';
import GlassCountInput from '../components/GlassCountInput';
import SevenRadarChart from '../components/SevenRadarChart';
import CheckImageButton from '../components/CheckImageButton';
import RichTextEditor from '../components/RichTextEditor';
import { tastingOptions } from '../data/tastingOptions';

interface IPurchase {
  id: string;
  whiskeys: {
    id: string;
    name: string;
    brand: string;
    image_url: string;
    type?: string;
    region?: string;
    bottle_volume?: number;
    abv?: number;
    price?: number;
  } | null;
  purchase_date: string;
  remaining_amount: number;
  bottle_volume?: number;
  abv?: number;
  store_name?: string;
  purchase_location?: string;
  final_price_krw?: number;
  original_price?: number;
  discount_price?: number;
}

interface MobileTastingNotesFormProps {
  onClose?: () => void;
  onSuccess?: () => void;
  tastingId?: string;
}

const MobileTastingNotesForm: React.FC<MobileTastingNotesFormProps> = ({ onClose, onSuccess, tastingId: tastingIdProp }) => {
  const navigate = useNavigate();
  const location = useLocation();
  const [purchases, setPurchases] = useState<IPurchase[]>([]);
  const [selectedPurchaseId, setSelectedPurchaseId] = useState('');
  const [tastingDate, setTastingDate] = useState(new Date().toISOString().split('T')[0]);
  const [color, setColor] = useState('');
  const [rating, setRating] = useState(5);
  const [nose, setNose] = useState('');
  const [palate, setPalate] = useState('');
  const [finish, setFinish] = useState('');
  const [notes, setNotes] = useState('');
  const [amountConsumed, setAmountConsumed] = useState(0);
  const [noseRating, setNoseRating] = useState(0);
  const [palateRating, setPalateRating] = useState(0);
  const [finishRating, setFinishRating] = useState(0);
  const [sweetness, setSweetness] = useState(0);
  const [smokiness, setSmokiness] = useState(0);
  const [fruitiness, setFruitiness] = useState(0);
  const [complexity, setComplexity] = useState(0);
  const [loading, setLoading] = useState(false);
  const [tastingId, setTastingId] = useState<string | null>(null);
  
  // Ï≤¥ÌÅ¨Îêú Ìï≠Î™©Îì§
  const [selectedNoseOptions, setSelectedNoseOptions] = useState<string[]>([]);
  const [selectedPalateOptions, setSelectedPalateOptions] = useState<string[]>([]);
  const [selectedFinishOptions, setSelectedFinishOptions] = useState<string[]>([]);
  const [showPurchaseModal, setShowPurchaseModal] = useState(false);
  const [purchaseSearchTerm, setPurchaseSearchTerm] = useState('');

  // ÏúÑÏä§ÌÇ§ ÏÑ†ÌÉù Ïó¨Î∂ÄÏóê Îî∞Î•∏ ÎπÑÌôúÏÑ±Ìôî ÏÉÅÌÉú
  const isDisabled = !selectedPurchaseId;

  // propÏù¥ÎÇò ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞ÏóêÏÑú tastingId Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    if (tastingIdProp) {
      setTastingId(tastingIdProp);
    } else {
      const params = new URLSearchParams(location.search);
      const tastingIdParam = params.get('tastingId');
      if (tastingIdParam) {
        setTastingId(tastingIdParam);
      }
    }
  }, [tastingIdProp, location.search]);

  useEffect(() => {
    loadPurchases();
  }, []);

  // tastingIdÍ∞Ä ÏûàÏúºÎ©¥ ÏàòÏ†ï Î™®ÎìúÎ°ú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    if (tastingId) {
      loadTastingNote();
    }
  }, [tastingId]);

  const loadTastingNote = async () => {
    if (!tastingId) return;
    
    try {
      const { data, error } = await supabase
        .from('tasting_notes')
        .select('*')
        .eq('id', tastingId)
        .single();

      if (error) throw error;
      if (!data) return;

      // Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
      setSelectedPurchaseId(data.purchase_id || '');
      setTastingDate(data.tasting_date || new Date().toISOString().split('T')[0]);
      setColor(data.color || '');
      setRating(data.rating || 5);
      setNose(data.nose || '');
      setPalate(data.palate || '');
      setFinish(data.finish || '');
      setNotes(data.notes || '');
      // amount_consumedÎäî ml Îã®ÏúÑÎ°ú Ï†ÄÏû•ÎêòÎØÄÎ°ú Ïûî ÏàòÎ°ú Î≥ÄÌôò (1Ïûî = 50ml)
      setAmountConsumed(data.amount_consumed ? Math.round((data.amount_consumed / 50) * 2) / 2 : 0);
      setNoseRating(data.nose_rating || 0);
      setPalateRating(data.palate_rating || 0);
      setFinishRating(data.finish_rating || 0);
      setSweetness(data.sweetness || 0);
      setSmokiness(data.smokiness || 0);
      setFruitiness(data.fruitiness || 0);
      setComplexity(data.complexity || 0);

      // Ï≤¥ÌÅ¨Îêú Ìï≠Î™© ÏÑ§Ï†ï
      if (data.nose) setSelectedNoseOptions(data.nose.split(',').map((s: string) => s.trim()));
      if (data.palate) setSelectedPalateOptions(data.palate.split(',').map((s: string) => s.trim()));
      if (data.finish) setSelectedFinishOptions(data.finish.split(',').map((s: string) => s.trim()));
    } catch (error) {
      console.error('ÌÖåÏù¥Ïä§ÌåÖ ÎÖ∏Ìä∏ Î°úÎìú Ïò§Î•ò:', error);
      alert('Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
    }
  };

  // ÏÑ∏Î∂Ä ÌèâÍ∞Ä Ï†êÏàòÏùò ÌèâÍ∑†ÏùÑ Ï†ÑÏ≤¥ ÌèâÍ∞ÄÍ∞íÏóê ÏûêÎèô Î∞òÏòÅ
  useEffect(() => {
    const average = (
      noseRating + 
      palateRating + 
      finishRating + 
      sweetness + 
      smokiness + 
      fruitiness + 
      complexity
    ) / 7;
    setRating(Math.round(average * 10) / 10); // ÏÜåÏàòÏ†ê Ï≤´Ïß∏ÏûêÎ¶¨ÍπåÏßÄ
  }, [noseRating, palateRating, finishRating, sweetness, smokiness, fruitiness, complexity]);

  // Ïù¥Î™®ÏßÄ Îß§Ìïë Ìï®Ïàò
  const getEmojiForOption = (option: string) => {
    const emojiMap: { [key: string]: string } = {
      'Î∞îÎãêÎùº': 'üåø', 'Ïπ¥ÎùºÎ©ú': 'üçØ', 'ÌóàÎãà': 'üçØ', 'Ï¥àÏΩúÎ¶ø': 'üç´', 'Ïª§Ìîº': '‚òï',
      'Í≥ºÏùº': 'üçé', 'ÏÇ¨Í≥º': 'üçé', 'Î∞∞': 'üçê', 'Î≥µÏà≠ÏïÑ': 'üçë', 'Ï≤¥Î¶¨': 'üçí',
      'ÍΩÉÌñ•': 'üå∏', 'Ïû•ÎØ∏': 'üåπ', 'ÎùºÎ≤§Îçî': 'üíú', 'Ïû¨Ïä§ÎØº': 'üåº',
      'Ïä§ÌååÏù¥Ïä§': 'üå∂Ô∏è', 'ÏãúÎÇòÎ™¨': 'üçØ', 'Ï†ïÌñ•': 'üåø', 'ÌõÑÏ∂î': 'üå∂Ô∏è', 'ÏÉùÍ∞ï': 'ü´ö',
      'Ïò§ÌÅ¨': 'üå≥', 'Î∞îÎãêÎùº Ïò§ÌÅ¨': 'üåø', 'Ïä§Î™®ÌÇ§': 'üí®', 'ÌîºÌä∏': 'üî•',
      'ÎØºÌä∏': 'üåø', 'Ïú†ÏπºÎ¶ΩÌà¨Ïä§': 'üåø', 'ÌóàÎ∏å': 'üåø', 'ÌÉÄÎ•¥': 'üñ§', 'Í≥†Î¨¥': '‚ö´',
      'Îã¨ÏΩ§Ìï®': 'üçØ', 'Îã®Îßõ': 'üçØ', 'Ïã†Îßõ': 'üçã', 'Î†àÎ™¨': 'üçã', 'ÎùºÏûÑ': 'üçã', 'Ïò§Î†åÏßÄ': 'üçä',
      'Ïì¥Îßõ': '‚òï', 'Îã§ÌÅ¨ Ï¥àÏΩúÎ¶ø': 'üç´', 'Ìò∏Îëê': 'ü•ú',
      'Îß§Ïö¥Îßõ': 'üå∂Ô∏è', 'Ïß†Îßõ': 'üßÇ', 'Ìï¥ÏÇ∞Î¨º': 'ü¶ê', 'Î∞îÎã§Ìñ•': 'üåä',
      'ÏßßÏùå': '‚ö°', 'Î≥¥ÌÜµ': '‚è±Ô∏è', 'Í∏¥ Ïó¨Ïö¥': '‚è≥',
      'Îî∞ÎúªÌï®': 'üî•', 'Ï∞®Í∞ÄÏõÄ': '‚ùÑÔ∏è', 'ÌÜ° ÏèòÎäî ÎäêÎÇå': '‚ö°',
      'Î∂ÄÎìúÎü¨ÏõÄ': '‚òÅÔ∏è', 'Í±∞Ïπú ÎäêÎÇå': 'üå™Ô∏è', 'ÌÅ¨Î¶¨ÎØ∏Ìï®': 'ü•õ'
    };
    return emojiMap[option] || 'ü•É';
  };

  // ÌïúÍ∏Ä ÏòµÏÖòÎ™ÖÏùÑ ÏòÅÎ¨∏ ÌååÏùºÎ™ÖÏúºÎ°ú Îß§ÌïëÌïòÎäî Ìï®Ïàò
  const getImageFileName = (option: string) => {
    const mapping: { [key: string]: string } = {
      // Ìñ• (aroma)
      'Î∞îÎãêÎùº': 'Vanilia',
      'Ïπ¥ÎùºÎ©ú': 'Caramel',
      'ÌóàÎãà': 'Honey',
      'Ï¥àÏΩúÎ¶ø': 'Chocolate',
      'Ïª§Ìîº': 'Coffee',
      'Í≥ºÏùº': 'Fruit',
      'ÏÇ¨Í≥º': 'apple',
      'Î∞∞': 'Pear',
      'Î≥µÏà≠ÏïÑ': 'Peach',
      'Ï≤¥Î¶¨': 'Cherry',
      'ÍΩÉÌñ•': 'Flower',
      'Ïû•ÎØ∏': 'Rose',
      'ÎùºÎ≤§Îçî': 'Lavender',
      'Ïû¨Ïä§ÎØº': 'Jasmine',
      'Ïä§ÌååÏù¥Ïä§': 'Spice',
      'ÏãúÎÇòÎ™¨': 'Cinnamon',
      'Ï†ïÌñ•': 'Clove',
      'ÌõÑÏ∂î': 'Pepper',
      'ÏÉùÍ∞ï': 'ginger',
      'Ïò§ÌÅ¨': 'Oak',
      'Î∞îÎãêÎùº Ïò§ÌÅ¨': 'Vanilla Oak',
      'Ïä§Î™®ÌÇ§': 'Smoky',
      'ÌîºÌä∏': 'Peat',
      'ÎØºÌä∏': 'Mint',
      'Ïú†ÏπºÎ¶ΩÌà¨Ïä§': 'Eucalyptus',
      'ÌóàÎ∏å': 'Hurb',
      'ÌÉÄÎ•¥': 'Tar',
      'Í≥†Î¨¥': 'Rubber',
      
      // Îßõ (taste)
      'Îã¨ÏΩ§Ìï®': 'sweetness',
      'Îã®Îßõ': 'sweetness',
      'Í≥ºÏùºÎßõ': 'fruit',
      'Ïã†Îßõ': 'sour',
      'Î†àÎ™¨': 'Lemon',
      'ÎùºÏûÑ': 'Lime',
      'Ïò§Î†åÏßÄ': 'Orange',
      'Ïì¥Îßõ': 'bitterness',
      'Îã§ÌÅ¨ Ï¥àÏΩúÎ¶ø': 'Chocolate',
      'Ìò∏Îëê': 'Walnut',
      'Îß§Ïö¥Îßõ': 'spicy',
      'Ïß†Îßõ': 'salty',
      'Ìï¥ÏÇ∞Î¨º': 'seafood',
      'Î∞îÎã§Ìñ•': 'sea-scent',
      
      // Ïó¨Ïö¥ (aftertaste)
      'ÏßßÏùå': 'short',
      'Î≥¥ÌÜµ': 'medium',
      'Í∏¥ Ïó¨Ïö¥': 'long',
      'Îî∞ÎúªÌï®': 'warm',
      'Ï∞®Í∞ÄÏõÄ': 'cool',
      'ÌÜ° ÏèòÎäî ÎäêÎÇå': 'tingling',
      'Î∂ÄÎìúÎü¨ÏõÄ': 'smooth',
      'Í±∞Ïπú ÎäêÎÇå': 'rough',
      'ÌÅ¨Î¶¨ÎØ∏Ìï®': 'creamy'
    };
    
    return mapping[option] || option;
  };

  // ÏûîÏó¨Îüâ ÏÉâÏÉÅ Ìï®Ïàò
  const getRemainingColor = (remaining: number, bottle: number) => {
    const percentage = bottle > 0 ? (remaining / bottle) * 100 : 0;
    if (percentage >= 80) return { bg: '#D1FAE5', border: '#86EFAC', text: '#065F46' }; // Ï¥àÎ°ù
    if (percentage >= 60) return { bg: '#FEF3C7', border: '#FDE68A', text: '#92400E' }; // ÎÖ∏Îûë
    if (percentage >= 40) return { bg: '#FED7AA', border: '#FDBA74', text: '#9A3412' }; // Ï£ºÌô©
    return { bg: '#FEE2E2', border: '#FCA5A5', text: '#991B1B' }; // Îπ®Í∞ï
  };

  // ÌèâÍ∞Ä Ï†êÏàòÏóê Îî∞Î•∏ ÏÉâÏÉÅ Ìï®Ïàò
  const getRatingColor = (score: number) => {
    if (score >= 9) return { text: '#DC2626', bg: '#FEE2E2' }; // Îπ®Í∞ï - ÏµúÍ≥†
    if (score >= 8) return { text: '#EA580C', bg: '#FFEDD5' }; // Ï£ºÌô© - Ïö∞Ïàò
    if (score >= 7) return { text: '#F59E0B', bg: '#FEF3C7' }; // ÎÖ∏Îûë - ÏñëÌò∏
    if (score >= 6) return { text: '#84CC16', bg: '#ECFCCB' }; // Ïó∞Îëê - Î≥¥ÌÜµ
    if (score >= 5) return { text: '#10B981', bg: '#D1FAE5' }; // Ï¥àÎ°ù - ÌèâÍ∑†
    if (score >= 4) return { text: '#06B6D4', bg: '#CFFAFE' }; // Ï≤≠Î°ù - ÎÇÆÏùå
    if (score >= 3) return { text: '#6366F1', bg: '#E0E7FF' }; // Î≥¥Îùº - Îß§Ïö∞ ÎÇÆÏùå
    return { text: '#8B5CF6', bg: '#EDE9FE' }; // Î≥¥Îùº
  };

  // ÎÇ®ÏùÄÏñë Ïû¨Í≥ÑÏÇ∞ Ìï®Ïàò (tasting_finish_dateÎßå ÏóÖÎç∞Ïù¥Ìä∏, remaining_amountÎäî Í≥ÑÏÇ∞ÏúºÎ°ú ÏÇ¨Ïö©)
  const recalculateRemainingAmount = async (purchaseId: string) => {
    try {
      // Ìï¥Îãπ purchaseÏùò bottle_volume Í∞ÄÏ†∏Ïò§Í∏∞
      const { data: purchaseData } = await supabase
        .from('purchases')
        .select('bottle_volume, tasting_start_date')
        .eq('id', purchaseId)
        .single();

      if (!purchaseData) return;

      const bottleVolume = purchaseData.bottle_volume || 700;

      // Ìï¥Îãπ purchaseÏùò Î™®Îì† tasting_notesÏùò amount_consumed Ìï©Í≥Ñ Í≥ÑÏÇ∞
      const { data: tastingNotes } = await supabase
        .from('tasting_notes')
        .select('amount_consumed, tasting_date')
        .eq('purchase_id', purchaseId);

      const totalConsumed = (tastingNotes || [])
        .reduce((sum, note) => sum + (note.amount_consumed || 0), 0);

      const newRemainingAmount = Math.max(0, bottleVolume - totalConsumed);

      // remaining_amountÎäî Í≥ÑÏÇ∞Í∞íÏùÑ ÏÇ¨Ïö©ÌïòÎØÄÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ÌïòÏßÄ ÏïäÏùå
      // ÎÇ®ÏùÄÏñëÏù¥ 0Ïù¥Î©¥ tasting_finish_dateÎßå ÏÑ§Ï†ï
      const updateData: any = {};

      if (newRemainingAmount === 0) {
        // Í∞ÄÏû• ÏµúÍ∑º ÌÖåÏù¥Ïä§ÌåÖ ÎÇ†Ïßú Í∞ÄÏ†∏Ïò§Í∏∞
        const latestTasting = tastingNotes
          ?.sort((a, b) => new Date(b.tasting_date || '').getTime() - new Date(a.tasting_date || '').getTime())[0];
        
        if (latestTasting?.tasting_date) {
          updateData.tasting_finish_date = latestTasting.tasting_date;
        }
      } else {
        // ÎÇ®ÏùÄÏñëÏù¥ ÏûàÏúºÎ©¥ tasting_finish_date Ï†úÍ±∞
        updateData.tasting_finish_date = null;
      }

      // tasting_finish_dateÎßå ÏóÖÎç∞Ïù¥Ìä∏ (remaining_amountÎäî Í≥ÑÏÇ∞Í∞í ÏÇ¨Ïö©)
      if (Object.keys(updateData).length > 0) {
        await supabase
          .from('purchases')
          .update(updateData)
          .eq('id', purchaseId);
      }

    } catch (error) {
      console.error('remaining_amount Ïû¨Í≥ÑÏÇ∞ Ïò§Î•ò:', error);
    }
  };

  const loadPurchases = async () => {
    try {
      const { data, error } = await supabase
        .from('purchases')
        .select(`
          id,
          purchase_date,
          bottle_volume,
          abv,
          tasting_finish_date,
          store_name,
          purchase_location,
          final_price_krw,
          original_price,
          discount_price,
          is_gifted,
          is_unavailable,
          whiskeys(
            id,
            name,
            brand,
            image_url,
            type,
            region,
            bottle_volume,
            abv,
            price
          )
        `)
        .order('purchase_date', { ascending: false });

      if (error) throw error;
      
      // Í∞Å purchaseÏùò Ïã§Ï†ú ÎÇ®ÏùÄÏñë Í≥ÑÏÇ∞ (tasting_notes Í∏∞Î∞ò)
      const purchasesWithRealRemaining = await Promise.all(((data || [])
        .filter((d: any) => !(d.is_gifted || d.is_unavailable))
      ).map(async (item: any) => {
        // Ìï¥Îãπ purchaseÏùò Î™®Îì† tasting_notes Ï°∞Ìöå
        const { data: tastingNotes } = await supabase
          .from('tasting_notes')
          .select('amount_consumed')
          .eq('purchase_id', item.id);

        // Ïã§Ï†ú ÎÇ®ÏùÄÏñë Í≥ÑÏÇ∞
        const totalConsumed = (tastingNotes || [])
          .reduce((sum: number, note: any) => sum + (note.amount_consumed || 0), 0);
        
        const bottleVolume = item.bottle_volume || item.whiskeys?.bottle_volume || 700;
        const realRemainingAmount = Math.max(0, bottleVolume - totalConsumed);

        return {
          ...item,
          remaining_amount: realRemainingAmount, // Ïã§Ï†ú Í≥ÑÏÇ∞Îêú ÎÇ®ÏùÄÏñë
          total_consumed: totalConsumed // Ï¥ù ÎßàÏã† Ïñë
        };
      }));
      
      // ÎÇ®ÏïÑÏûàÎäî ÏúÑÏä§ÌÇ§Îßå ÌïÑÌÑ∞ÎßÅ
      const availablePurchases = purchasesWithRealRemaining.filter((item: any) => {
        const hasNoFinishDate = !item.tasting_finish_date;
        const hasRemaining = item.remaining_amount && item.remaining_amount > 0;
        
        return hasNoFinishDate || hasRemaining;
      });
      
      // Supabase ÏøºÎ¶¨ Í≤∞Í≥ºÎ•º Ïò¨Î∞îÎ•∏ ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
      const formattedPurchases = availablePurchases.map((item: any) => ({
        id: item.id,
        purchase_date: item.purchase_date,
        remaining_amount: item.remaining_amount || 0,
        bottle_volume: item.bottle_volume || 700,
        store_name: item.store_name,
        purchase_location: item.purchase_location,
        final_price_krw: item.final_price_krw,
        original_price: item.original_price,
        discount_price: item.discount_price,
        whiskeys: item.whiskeys ? {
          id: item.whiskeys.id,
          name: item.whiskeys.name,
          brand: item.whiskeys.brand,
          image_url: item.whiskeys.image_url,
          type: item.whiskeys.type,
          region: item.whiskeys.region,
          bottle_volume: item.whiskeys.bottle_volume,
          abv: item.whiskeys.abv,
          price: item.whiskeys.price
        } : null
      }));
      
      setPurchases(formattedPurchases);
    } catch (error) {
      console.error('Íµ¨Îß§ Î™©Î°ù Î°úÎìú Ïò§Î•ò:', error);
    }
  };

  const handleSubmit = async () => {
    if (!selectedPurchaseId) {
      alert('Íµ¨Îß§Ìïú ÏúÑÏä§ÌÇ§Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    try {
      setLoading(true);

      const submitData: any = {
        purchase_id: selectedPurchaseId,
        tasting_date: tastingDate,
        color: color || null,
        nose: selectedNoseOptions.length > 0 ? selectedNoseOptions.join(', ') : (nose || null),
        palate: selectedPalateOptions.length > 0 ? selectedPalateOptions.join(', ') : (palate || null),
        finish: selectedFinishOptions.length > 0 ? selectedFinishOptions.join(', ') : (finish || null),
        rating: Math.round(rating),
        notes: notes || null,
        // ÏûîÏàòÎ•º mlÎ°ú Î≥ÄÌôò: 1Ïûî = 50ml, 0.5Ïûî = 25ml
        amount_consumed: amountConsumed * 50,
        nose_rating: Math.round(noseRating),
        palate_rating: Math.round(palateRating),
        finish_rating: Math.round(finishRating),
        sweetness: Math.round(sweetness),
        smokiness: Math.round(smokiness),
        fruitiness: Math.round(fruitiness),
        complexity: Math.round(complexity)
      };

      // ÏàòÏ†ï Î™®ÎìúÏù∏ Í≤ΩÏö∞ UPDATE
      if (tastingId) {
        const { error } = await supabase
          .from('tasting_notes')
          .update(submitData)
          .eq('id', tastingId);

        if (error) throw error;
        
        alert('ÌÖåÏù¥Ïä§ÌåÖ ÎÖ∏Ìä∏Í∞Ä ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.');
      } else {
        // ÏÉàÎ°ú ÏÉùÏÑ±ÌïòÎäî Í≤ΩÏö∞ INSERT
        const { error } = await supabase
          .from('tasting_notes')
          .insert([submitData]);

        if (error) throw error;

        // Ï≤òÏùå ÏãúÏùåÏùº ÏÑ§Ï†ï
        const { data: purchaseData } = await supabase
          .from('purchases')
          .select('tasting_start_date')
          .eq('id', selectedPurchaseId)
          .single();

        if (purchaseData && !purchaseData.tasting_start_date) {
          await supabase
            .from('purchases')
            .update({ tasting_start_date: tastingDate })
            .eq('id', selectedPurchaseId);
        }

        alert('ÌÖåÏù¥Ïä§ÌåÖ ÎÖ∏Ìä∏Í∞Ä Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§.');
      }

      // ÎÇ®ÏùÄÏñë Ïû¨Í≥ÑÏÇ∞ Î∞è ÏóÖÎç∞Ïù¥Ìä∏ (tasting_notesÏùò amount_consumed Ìï©Í≥Ñ Í∏∞Î∞ò)
      await recalculateRemainingAmount(selectedPurchaseId);

      // ÏÉâÏÉÅ ÏóÖÎç∞Ïù¥Ìä∏
      if (color) {
        await supabase
          .from('purchases')
          .update({ color })
          .eq('id', selectedPurchaseId);
      }

      // onSuccessÍ∞Ä ÏûàÏúºÎ©¥ Ìò∏Ï∂úÌïòÍ≥† navigateÎäî ÌïòÏßÄ ÏïäÏùå (Ïò§Î≤ÑÎ†àÏù¥ Î∞©Ïãù)
      if (onSuccess) {
        onSuccess();
      } else {
        navigate('/mobile/tasting-notes');
      }
    } catch (error) {
      console.error('Ï†ÄÏû• Ïò§Î•ò:', error);
      alert('Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  const selectedPurchase = purchases.find(p => p.id === selectedPurchaseId);
  const maxGlasses = selectedPurchase ? Math.min(5, Math.floor(selectedPurchase.remaining_amount / 50)) : 5;

  // ÌïÑÌÑ∞ÎßÅÎêú Íµ¨Îß§ Î™©Î°ù
  const filteredPurchases = purchases.filter(purchase => {
    if (!purchaseSearchTerm) return true;
    const searchLower = purchaseSearchTerm.toLowerCase();
    return (
      purchase.whiskeys?.name?.toLowerCase().includes(searchLower) ||
      purchase.whiskeys?.brand?.toLowerCase().includes(searchLower)
    );
  });

  return (
    <>
      {/* ÏÉÅÎã® Í≥†Ï†ï Ìó§Îçî */}
      <header 
        style={{ 
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          height: '56px',
          backgroundColor: 'white',
          borderBottom: '1px solid #e5e7eb',
          boxShadow: '0 2px 4px rgba(0, 0, 0, 0.05)',
          zIndex: 1001,
          display: 'flex',
          alignItems: 'center',
          padding: '0 16px'
        }}
      >
        <div style={{ 
          display: 'flex', 
          alignItems: 'center', 
          gap: '12px',
          flex: 1
        }}>
          <button
            onClick={onClose}
            style={{ 
              padding: '8px',
              borderRadius: '8px',
              border: 'none',
              background: 'transparent',
              cursor: 'pointer',
              fontSize: '18px'
            }}
          >
            ‚Üê
          </button>

          {/* ÌéòÏù¥ÏßÄ Ï†úÎ™© */}
          <div style={{ 
            flex: 1,
            fontSize: '18px',
            fontWeight: 600,
            color: '#1f2937',
            textAlign: 'center'
          }}>
            {tastingId ? 'ÌÖåÏù¥Ïä§ÌåÖ ÎÖ∏Ìä∏ ÏàòÏ†ï' : 'ÏÉà ÌÖåÏù¥Ïä§ÌåÖ ÎÖ∏Ìä∏'}
          </div>
          
          {/* Ïö∞Ï∏° Îπà Í≥µÍ∞Ñ (ÎåÄÏπ≠ Ïú†ÏßÄ) */}
          <div style={{ width: '32px' }}></div>
        </div>
      </header>

      {/* Ïä§ÌÅ¨Î°§ Í∞ÄÎä•Ìïú ÏΩòÌÖêÏ∏† ÏòÅÏó≠ */}
      <div style={{
        position: 'absolute',
        top: '56px',
        left: 0,
        right: 0,
        bottom: 0,
        overflowY: 'auto',
        WebkitOverflowScrolling: 'touch',
        paddingBottom: '80px'
      }}>
        <div style={{ padding: '16px' }}>

        {/* ÏúÑÏä§ÌÇ§ ÏÑ†ÌÉù */}
        <div style={{ marginBottom: '16px' }}>
          <label style={{ display: 'block', fontSize: '14px', fontWeight: '600', marginBottom: '8px' }}>
            ÏúÑÏä§ÌÇ§ ÏÑ†ÌÉù *
          </label>
          <Button
            variant="secondary"
            onClick={() => setShowPurchaseModal(true)}
            style={{ width: '100%', textAlign: 'left' }}
          >
            {selectedPurchaseId 
              ? `üì¶ ${selectedPurchase?.whiskeys?.name}` 
              : 'ÏúÑÏä§ÌÇ§Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî'}
          </Button>
        </div>

        {/* ÏÑ†ÌÉùÎêú ÏúÑÏä§ÌÇ§ Ï†ïÎ≥¥ */}
        {selectedPurchase && (
          <div style={{
            padding: '16px',
            backgroundColor: '#F9FAFB',
            borderRadius: '12px',
            marginBottom: '16px',
            border: '1px solid #E5E7EB'
          }}>
            {/* ÏúÑÏä§ÌÇ§ Ïù¥ÎØ∏ÏßÄ Î∞è Í∏∞Î≥∏ Ï†ïÎ≥¥ + ÏûîÏó¨Îüâ Ïò§Î•∏Ï™Ω Î∞∞Ïπò */}
            <div style={{ display: 'flex', gap: '12px', marginBottom: '12px' }}>
              {selectedPurchase.whiskeys?.image_url && (
                <div style={{ width: '140px', height: '140px', flexShrink: 0 }}>
                  <div style={{
                    width: '100%',
                    height: '100%',
                    backgroundColor: '#F3F4F6',
                    borderRadius: '8px',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    overflow: 'hidden'
                  }}>
                    <img
                      src={selectedPurchase.whiskeys.image_url}
                      alt={selectedPurchase.whiskeys.name}
                      style={{ width: '100%', height: '100%', objectFit: 'contain' }}
                    />
                  </div>
                </div>
              )}
              <div style={{ flex: 1, display: 'flex', flexDirection: 'column', gap: '0px' }}>
                {/* ÏúÑÏä§ÌÇ§ Ï†ïÎ≥¥ */}
                <div style={{ flex: 2, minWidth: 0 }}>
                  <div style={{ fontSize: '16px', fontWeight: '700', marginBottom: '4px', color: '#111827' }}>
                    {selectedPurchase.whiskeys?.name}
                  </div>
                  <div style={{ fontSize: '13px', color: '#6B7280', marginBottom: '10px' }}>
                    {selectedPurchase.whiskeys?.brand}
                  </div>
                  {/* Î™®Î∞îÏùº: Ï≤´ ÌñâÏóê Î∞∞ÏßÄ(ÌÉÄÏûÖ/ÏßÄÏó≠/Ïö©Îüâ/ÎèÑÏàò) ÏûêÎèô Í∞êÏã∏Í∏∞, ÎëòÏß∏ ÌñâÏóê ÏûîÏó¨Îüâ Ï†ÑÏ≤¥Ìè≠ */}
                  <div style={{ display: 'flex', flexDirection: 'column', gap: '8px', marginTop: '8px' }}>
                    {/* Î∞∞ÏßÄ Î¨∂Ïùå */}
                    <div
                      style={{
                        backgroundColor: '#F9FAFB',
                        border: '0px solid #E5E7EB',
                        borderRadius: '8px',
                        padding: '4px',
                        display: 'flex',
                        flexWrap: 'wrap',
                        gap: '4px',
                        alignItems: 'center'
                      }}
                    >
                      {selectedPurchase.whiskeys?.type && (
                        <span style={{
                          backgroundColor: '#EF4444',
                          color: '#FFFFFF',
                          padding: '6px 10px',
                          borderRadius: '6px',
                          fontSize: '11px',
                          fontWeight: 600
                        }}>{selectedPurchase.whiskeys.type}</span>
                      )}
                      {selectedPurchase.whiskeys?.region && (
                        <span style={{
                          backgroundColor: '#3B82F6',
                          color: '#FFFFFF',
                          padding: '6px 10px',
                          borderRadius: '6px',
                          fontSize: '11px',
                          fontWeight: 600
                        }}>{selectedPurchase.whiskeys.region}</span>
                      )}
                      {(selectedPurchase.bottle_volume || selectedPurchase.whiskeys?.bottle_volume) && (
                        <span style={{
                          backgroundColor: '#10B981',
                          color: '#FFFFFF',
                          padding: '6px 10px',
                          borderRadius: '6px',
                          fontSize: '11px',
                          fontWeight: 600
                        }}>{(selectedPurchase.bottle_volume || selectedPurchase.whiskeys?.bottle_volume)}ml</span>
                      )}
                      {(selectedPurchase.abv || selectedPurchase.whiskeys?.abv) && (
                        <span style={{
                          backgroundColor: '#F59E0B',
                          color: '#111827',
                          padding: '6px 10px',
                          borderRadius: '6px',
                          fontSize: '11px',
                          fontWeight: 700
                        }}>{(selectedPurchase.abv || selectedPurchase.whiskeys?.abv)}%</span>
                      )}
                    </div>

                    {/* ÏûîÏó¨Îüâ - Îã§Ïùå Ìñâ Ï†ÑÏ≤¥ Ìè≠ */}
                    <div
                      style={{
                        backgroundColor: '#F9FAFB',
                        border: '0px solid #E5E7EB',
                        borderRadius: '8px',
                        padding: '4px',
                        display: 'flex',
                        justifyContent: 'center',
                        alignItems: 'center',
                        gap: '4px',
                        fontSize: '11px',
                        fontWeight: 700,
                        color: '#374151'
                      }}
                    >
                      {(() => {
                        const purchaseVolume = selectedPurchase.bottle_volume || null;
                        const whiskeyVolume = selectedPurchase.whiskeys?.bottle_volume || null;
                        const baseVol = purchaseVolume ?? whiskeyVolume ?? 700;
                        const value = selectedPurchase.remaining_amount;
                        const percent = ((value / baseVol) * 100);
                        return (
                          <>
                            <span style={{
                              backgroundColor: '#E0E7EF',
                              color: '#374151',
                              borderRadius: '6px',
                              fontSize: '10px',
                              fontWeight: 700,
                              padding: '2px 8px'
                            }}>ÏûîÏó¨Îüâ</span>
                            <span>{value}ml</span>
                            <span style={{ color: '#6B7280', fontWeight: 600, fontSize: '12px' }}>({percent.toFixed(0)}%)</span>
                          </>
                        )
                      })()}
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Íµ¨Îß§ Ï†ïÎ≥¥ */}
            {selectedPurchase.purchase_date && (
              <div style={{
                marginTop: '16px',
                paddingTop: '16px',
                borderTop: '1px solid #E5E7EB'
              }}>
                <div style={{ fontSize: '14px', fontWeight: '600', marginBottom: '12px', color: '#6B7280' }}>
                  üìÖ Íµ¨Îß§ Ï†ïÎ≥¥
                </div>
                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
                  {selectedPurchase.purchase_date && (
                    <div style={{ display: 'flex', justifyContent: 'space-between', fontSize: '13px' }}>
                      <span style={{ color: '#9CA3AF' }}>Íµ¨Îß§Ïùº</span>
                      <span style={{ fontWeight: '600' }}>{new Date(selectedPurchase.purchase_date).toLocaleDateString('ko-KR')}</span>
                    </div>
                  )}
                  {selectedPurchase.store_name && (
                    <div style={{ display: 'flex', justifyContent: 'space-between', fontSize: '13px' }}>
                      <span style={{ color: '#9CA3AF' }}>Íµ¨Îß§Ï≤ò</span>
                      <span style={{ fontWeight: '600' }}>{selectedPurchase.store_name}</span>
                    </div>
                  )}
                  {selectedPurchase.purchase_location && (
                    <div style={{ display: 'flex', justifyContent: 'space-between', fontSize: '13px' }}>
                      <span style={{ color: '#9CA3AF' }}>Íµ¨Îß§ÏúÑÏπò</span>
                      <span style={{ fontWeight: '600' }}>{selectedPurchase.purchase_location}</span>
                    </div>
                  )}
                  {selectedPurchase.final_price_krw && (
                    <>
                      <div style={{ display: 'flex', justifyContent: 'space-between', fontSize: '13px' }}>
                        <span style={{ color: '#9CA3AF' }}>Íµ¨Îß§Í∞ÄÍ≤©</span>
                        <span style={{ fontWeight: '600' }}>‚Ç©{selectedPurchase.final_price_krw.toLocaleString('ko-KR')}</span>
                      </div>
                      {selectedPurchase.whiskeys?.price && (
                        <div style={{ display: 'flex', justifyContent: 'space-between', fontSize: '13px' }}>
                          <span style={{ color: '#9CA3AF' }}>Îç∞ÏùºÎ¶¨ÏÉ∑ Í∞ÄÍ≤©</span>
                          <span style={{ fontWeight: '600' }}>‚Ç©{selectedPurchase.whiskeys.price.toLocaleString('ko-KR')}</span>
                        </div>
                      )}
                      {selectedPurchase.whiskeys?.price && (
                        <div style={{
                          marginTop: '4px',
                          padding: '6px 12px',
                          backgroundColor: (selectedPurchase.whiskeys.price - selectedPurchase.final_price_krw) >= 0 ? '#FEF3C7' : '#D1FAE5',
                          borderRadius: '6px',
                          fontSize: '12px',
                          fontWeight: '600',
                          color: (selectedPurchase.whiskeys.price - selectedPurchase.final_price_krw) >= 0 ? '#92400E' : '#065F46',
                          textAlign: 'center'
                        }}>
                          {(selectedPurchase.whiskeys.price - selectedPurchase.final_price_krw) >= 0 ? '‚¨Ü' : '‚¨á'} Ï∞®Ïï°: ‚Ç©{Math.abs(selectedPurchase.whiskeys.price - selectedPurchase.final_price_krw).toLocaleString('ko-KR')}
                        </div>
                      )}
                    </>
                  )}
                </div>
              </div>
            )}
          </div>
        )}

        {/* ÌÖåÏù¥Ïä§ÌåÖ ÎÇ†Ïßú */}
        <div style={{ marginBottom: '16px' }}>
          <label style={{ display: 'block', fontSize: '14px', fontWeight: '600', marginBottom: '8px' }}>
            ÌÖåÏù¥Ïä§ÌåÖ ÎÇ†Ïßú *
          </label>
          <Input
            type="date"
            value={tastingDate}
            onChange={(value) => setTastingDate(value)}
            disabled={isDisabled}
          />
        </div>

        {/* ÎßàÏã† Ïñë */}
        <div style={{ marginBottom: '16px' }}>
          <label style={{ display: 'block', fontSize: '14px', fontWeight: '600', marginBottom: '8px' }}>
            ÎßàÏã† Ïñë {selectedPurchase && `(ÎÇ®ÏùÄÏñë: ${selectedPurchase.remaining_amount}ml)`}
          </label>
          <GlassCountInput
            value={amountConsumed}
            onChange={(value) => setAmountConsumed(value)}
            maxGlasses={maxGlasses}
            disabled={!selectedPurchaseId}
          />
        </div>

        {/* ÏÉâÏÉÅ */}
        <div style={{ marginBottom: '16px' }}>
          <label style={{ display: 'block', fontSize: '14px', fontWeight: '600', marginBottom: '8px' }}>
            ÏÉâÏÉÅ
          </label>
          <ColorSelector
            value={color}
            onChange={setColor}
            disabled={isDisabled}
          />
        </div>

        {/* Ìñ• */}
        <div style={{ marginBottom: '16px' }}>
          <label style={{ display: 'block', fontSize: '14px', fontWeight: '600', marginBottom: '8px' }}>
            üî• Ìñ•
          </label>
          <div style={{ 
            display: 'grid', 
            gridTemplateColumns: 'repeat(auto-fill, minmax(80px, 1fr))', 
            gap: '6px',
            padding: '8px',
            backgroundColor: '#F9FAFB',
            borderRadius: '8px'
          }}>
            {tastingOptions.nose.map(option => (
              <CheckImageButton
                key={option}
                label={option}
                checked={selectedNoseOptions.includes(option)}
                onChange={(checked) => {
                  if (checked) {
                    setSelectedNoseOptions(prev => [...prev, option]);
                  } else {
                    setSelectedNoseOptions(prev => prev.filter(item => item !== option));
                  }
                }}
                image={getEmojiForOption(option)}
                backgroundImage={`/img/icons/aroma/${encodeURIComponent(getImageFileName(option))}.png`}
                accentColor="#3B82F6"
                height={42}
                disabled={isDisabled}
              />
            ))}
          </div>
        </div>

        {/* Îßõ */}
        <div style={{ marginBottom: '16px' }}>
          <label style={{ display: 'block', fontSize: '14px', fontWeight: '600', marginBottom: '8px' }}>
            üíú Îßõ
          </label>
          <div style={{ 
            display: 'grid', 
            gridTemplateColumns: 'repeat(auto-fill, minmax(80px, 1fr))', 
            gap: '6px',
            padding: '8px',
            backgroundColor: '#F9FAFB',
            borderRadius: '8px'
          }}>
            {tastingOptions.palate.map(option => (
              <CheckImageButton
                key={option}
                label={option}
                checked={selectedPalateOptions.includes(option)}
                onChange={(checked) => {
                  if (checked) {
                    setSelectedPalateOptions(prev => [...prev, option]);
                  } else {
                    setSelectedPalateOptions(prev => prev.filter(item => item !== option));
                  }
                }}
                image={getEmojiForOption(option)}
                backgroundImage={`/img/icons/taste/${encodeURIComponent(getImageFileName(option))}.png`}
                accentColor="#8B5CF6"
                height={42}
                disabled={isDisabled}
              />
            ))}
          </div>
        </div>

        {/* Ïó¨Ïö¥ */}
        <div style={{ marginBottom: '16px' }}>
          <label style={{ display: 'block', fontSize: '14px', fontWeight: '600', marginBottom: '8px' }}>
            ‚ùÑÔ∏è Ïó¨Ïö¥
          </label>
          <div style={{ 
            display: 'grid', 
            gridTemplateColumns: 'repeat(auto-fill, minmax(80px, 1fr))', 
            gap: '6px',
            padding: '8px',
            backgroundColor: '#F9FAFB',
            borderRadius: '8px'
          }}>
            {tastingOptions.finish.map(option => (
              <CheckImageButton
                key={option}
                label={option}
                checked={selectedFinishOptions.includes(option)}
                onChange={(checked) => {
                  if (checked) {
                    setSelectedFinishOptions(prev => [...prev, option]);
                  } else {
                    setSelectedFinishOptions(prev => prev.filter(item => item !== option));
                  }
                }}
                image={getEmojiForOption(option)}
                backgroundImage={`/img/icons/aftertaste/${encodeURIComponent(getImageFileName(option))}.png`}
                accentColor="#06B6D4"
                height={42}
                disabled={isDisabled}
              />
            ))}
          </div>
        </div>

        {/* ÌèâÍ∞Ä Ï∞®Ìä∏ */}
        <div style={{ marginBottom: '16px', padding: '16px', backgroundColor: '#F9FAFB', borderRadius: '8px' }}>
          <div style={{ fontSize: '14px', fontWeight: '600', marginBottom: '12px' }}>
            üìä ÌèâÍ∞Ä Ï∞®Ìä∏
          </div>
          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
            <SevenRadarChart
              values={{
                nose: noseRating,
                palate: palateRating,
                finish: finishRating,
                sweetness: sweetness,
                smokiness: smokiness,
                fruitiness: fruitiness,
                complexity: complexity
              }}
              max={10}
              size={200}
            />
          </div>
          {/* Ï†ÑÏ≤¥ ÌèâÍ∞Ä Ï†êÏàò */}
          <div style={{
            marginTop: '12px',
            padding: '12px',
            backgroundColor: getRatingColor(rating).bg,
            borderRadius: '8px',
            textAlign: 'center',
            border: `2px solid ${getRatingColor(rating).text}`,
          }}>
            <div style={{ fontSize: '12px', color: '#6B7280', marginBottom: '4px' }}>Ï†ÑÏ≤¥ ÌèâÍ∞Ä</div>
            <div style={{ fontSize: '24px', fontWeight: '700', color: getRatingColor(rating).text }}>
              {rating.toFixed(1)}/10
            </div>
          </div>
        </div>

        {/* ÏÑ∏Î∂Ä ÌèâÍ∞Ä */}
        <div style={{ marginBottom: '16px', padding: '12px', backgroundColor: '#F9FAFB', borderRadius: '8px' }}>
          <div style={{ fontSize: '14px', fontWeight: '600', marginBottom: '12px' }}>
            üìä ÏÑ∏Î∂Ä ÌèâÍ∞Ä
          </div>
          
          {/* Ìñ• ÌèâÏ†ê */}
          <div style={{ marginBottom: '12px' }}>
            <div style={{ fontSize: '13px', fontWeight: '600', marginBottom: '4px' }}>üî• Ìñ•: {noseRating}/10</div>
            <Trackbar value={noseRating} onChange={setNoseRating} min={0} max={10} step={0.5} color="#EF4444" disabled={isDisabled} />
          </div>

          {/* Îßõ ÌèâÏ†ê */}
          <div style={{ marginBottom: '12px' }}>
            <div style={{ fontSize: '13px', fontWeight: '600', marginBottom: '4px' }}>üíú Îßõ: {palateRating}/10</div>
            <Trackbar value={palateRating} onChange={setPalateRating} min={0} max={10} step={0.5} color="#A855F7" disabled={isDisabled} />
          </div>

          {/* Ïó¨Ïö¥ ÌèâÏ†ê */}
          <div style={{ marginBottom: '12px' }}>
            <div style={{ fontSize: '13px', fontWeight: '600', marginBottom: '4px' }}>‚ùÑÔ∏è Ïó¨Ïö¥: {finishRating}/10</div>
            <Trackbar value={finishRating} onChange={setFinishRating} min={0} max={10} step={0.5} color="#06B6D4" disabled={isDisabled} />
          </div>

          {/* Îã®Îßõ */}
          <div style={{ marginBottom: '12px' }}>
            <div style={{ fontSize: '13px', fontWeight: '600', marginBottom: '4px' }}>üçØ Îã®Îßõ: {sweetness}/10</div>
            <Trackbar value={sweetness} onChange={setSweetness} min={0} max={10} step={0.5} color="#F59E0B" disabled={isDisabled} />
          </div>

          {/* Ïä§Î™®ÌÇ§Ìï® */}
          <div style={{ marginBottom: '12px' }}>
            <div style={{ fontSize: '13px', fontWeight: '600', marginBottom: '4px' }}>üí® Ïä§Î™®ÌÇ§Ìï®: {smokiness}/10</div>
            <Trackbar value={smokiness} onChange={setSmokiness} min={0} max={10} step={0.5} color="#64748B" disabled={isDisabled} />
          </div>

          {/* Í≥ºÏùºÌñ• */}
          <div style={{ marginBottom: '12px' }}>
            <div style={{ fontSize: '13px', fontWeight: '600', marginBottom: '4px' }}>üçé Í≥ºÏùºÌñ•: {fruitiness}/10</div>
            <Trackbar value={fruitiness} onChange={setFruitiness} min={0} max={10} step={0.5} color="#EC4899" disabled={isDisabled} />
          </div>

          {/* Î≥µÌï©ÏÑ± */}
          <div style={{ marginBottom: '8px' }}>
            <div style={{ fontSize: '13px', fontWeight: '600', marginBottom: '4px' }}>üåü Î≥µÌï©ÏÑ±: {complexity}/10</div>
            <Trackbar value={complexity} onChange={setComplexity} min={0} max={10} step={0.5} color="#8B5CF6" disabled={isDisabled} />
          </div>
        </div>

        {/* Ï∂îÍ∞Ä Î©îÎ™® */}
        <div style={{ marginBottom: '16px' }}>
          <label style={{ display: 'block', fontSize: '14px', fontWeight: '600', marginBottom: '8px' }}>
            üìù Ï∂îÍ∞Ä Î©îÎ™®
          </label>
          <RichTextEditor
            content={notes}
            onChange={setNotes}
            placeholder="Ï∂îÍ∞ÄÏ†ÅÏù∏ Î©îÎ™®Î•º ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî"
            disabled={isDisabled}
          />
        </div>

        {/* Ïï°ÏÖò Î≤ÑÌäº */}
        <div style={{ display: 'flex', gap: '8px', marginTop: '24px' }}>
          <Button
            variant="secondary"
            onClick={() => {
              if (onClose) {
                onClose();
              } else {
                navigate('/mobile/tasting-notes');
              }
            }}
            style={{ flex: 1 }}
          >
            Ï∑®ÏÜå
          </Button>
          <Button
            variant="primary"
            onClick={handleSubmit}
            disabled={loading || isDisabled}
            style={{ flex: 1 }}
          >
            {loading ? 'Ï†ÄÏû• Ï§ë...' : 'Ï†ÄÏû•'}
          </Button>
        </div>

      {/* Íµ¨Îß§ ÏÑ†ÌÉù Î™®Îã¨ */}
      {showPurchaseModal && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.5)',
          zIndex: 1000,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          padding: '16px'
        }}>
          <div style={{
            backgroundColor: 'white',
            borderRadius: '16px',
            padding: '20px',
            width: '100%',
            maxWidth: '500px',
            maxHeight: '80vh',
            display: 'flex',
            flexDirection: 'column'
          }}>
            {/* Î™®Îã¨ Ìó§Îçî */}
            <div style={{ marginBottom: '16px', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <h3 style={{ fontSize: '18px', fontWeight: 'bold' }}>ÏúÑÏä§ÌÇ§ ÏÑ†ÌÉù</h3>
              <Button
                variant="secondary"
                onClick={() => setShowPurchaseModal(false)}
                style={{ minWidth: 'auto', padding: '4px 12px' }}
              >
                ‚úï
              </Button>
            </div>

            {/* Í≤ÄÏÉâÏ∞Ω */}
            <div style={{ marginBottom: '16px' }}>
              <Input
                type="text"
                placeholder="ÏúÑÏä§ÌÇ§Î™Ö ÎòêÎäî Î∏åÎûúÎìúÎ°ú Í≤ÄÏÉâ..."
                value={purchaseSearchTerm}
                onChange={(value) => setPurchaseSearchTerm(value)}
              />
            </div>

            {/* ÏúÑÏä§ÌÇ§ Î™©Î°ù */}
            <div style={{ flex: 1, overflowY: 'auto', gap: '8px', display: 'flex', flexDirection: 'column' }}>
              {filteredPurchases.length === 0 ? (
                <div style={{ textAlign: 'center', padding: '40px 20px', color: '#9CA3AF' }}>
                  {purchaseSearchTerm ? 'Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§' : 'ÏÑ†ÌÉù Í∞ÄÎä•Ìïú ÏúÑÏä§ÌÇ§Í∞Ä ÏóÜÏäµÎãàÎã§'}
                </div>
              ) : (
                filteredPurchases.map(purchase => (
                  <div
                    key={purchase.id}
                    onClick={() => {
                      setSelectedPurchaseId(purchase.id);
                      setShowPurchaseModal(false);
                    }}
                    style={{
                      padding: '12px',
                      border: '1px solid #E5E7EB',
                      borderRadius: '8px',
                      cursor: 'pointer',
                      backgroundColor: selectedPurchaseId === purchase.id ? '#EFF6FF' : 'white',
                      display: 'flex',
                      gap: '12px',
                      alignItems: 'center'
                    }}
                  >
                    {/* ÏôºÏ™Ω: Ïù¥ÎØ∏ÏßÄ */}
                    {purchase.whiskeys?.image_url && (
                      <img
                        src={purchase.whiskeys.image_url}
                        alt={purchase.whiskeys.name}
                        style={{
                          width: '60px',
                          height: '60px',
                          borderRadius: '8px',
                          objectFit: 'contain'
                        }}
                      />
                    )}
                    {/* Í∞ÄÏö¥Îç∞: Í∏∞Î≥∏ Ï†ïÎ≥¥ */}
                    <div style={{ flex: 1, minWidth: 0, display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>
                      <div style={{ fontSize: '14px', fontWeight: '600', marginBottom: '4px' }}>
                        {purchase.whiskeys?.name}
                      </div>
                      <div style={{ fontSize: '12px', color: '#6B7280' }}>
                        {purchase.whiskeys?.brand}
                      </div>
                    </div>
                    {/* Ïò§Î•∏Ï™Ω: ÎÇ®ÏùÄ Ïö©Îüâ */}
                    <div style={{ display: 'flex', alignItems: 'center', minWidth: '82px', justifyContent: 'flex-end' }}>
                      {(() => {
                        const bottleVolume = purchase.bottle_volume || purchase.whiskeys?.bottle_volume || 700;
                        const color = getRemainingColor(purchase.remaining_amount, bottleVolume);
                        return (
                          <div style={{
                            fontSize: '11px',
                            fontWeight: '600',
                            padding: '4px 8px',
                            borderRadius: '4px',
                            backgroundColor: color.bg,
                            border: `1px solid ${color.border}`,
                            color: color.text,
                            display: 'inline-block',
                            minWidth: '62px',
                            textAlign: 'center'
                          }}>
                            üì¶ {purchase.remaining_amount}ml
                          </div>
                        );
                      })()}
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>
        </div>
      )}
        </div>
      </div>
    </>
  );
};

export default MobileTastingNotesForm;

