# 위스키 노트 앱 개발 규칙

## 프로젝트 개요
- **목표**: 개인용 위스키/주류 정보 및 테이스팅 노트 관리 앱
- **플랫폼**: 프로그레시브 웹 앱 (PWA)
- **기술 스택**: React 18 + TypeScript + Vite + Tailwind CSS + Supabase + Zustand

## 코드 스타일 가이드

### TypeScript 규칙
- 모든 컴포넌트와 함수에 타입 정의 필수
- `any` 타입 사용 금지, `unknown` 사용 권장
- 인터페이스는 `I` 접두사 사용 (예: `IWhiskey`)
- 타입 별칭은 PascalCase 사용 (예: `TastingNote`)

### React 컴포넌트 규칙
- 함수형 컴포넌트만 사용
- 컴포넌트명은 PascalCase
- Props 인터페이스는 `{ComponentName}Props` 형식
- 커스텀 훅은 `use` 접두사 사용

### 파일 및 폴더 구조
- 컴포넌트 파일은 `.tsx` 확장자
- 타입 정의 파일은 `.types.ts` 확장자
- 유틸리티 함수는 `.utils.ts` 확장자
- 폴더명은 kebab-case (예: `tasting-notes`)

### Tailwind CSS 규칙
- 인라인 스타일 사용 금지
- Tailwind 유틸리티 클래스 우선 사용
- 커스텀 CSS는 `@apply` 지시어 사용
- 반응형 디자인 필수 (mobile-first)

### 상태 관리 규칙
- 전역 상태는 Zustand 스토어 사용
- 로컬 상태는 useState 사용
- 서버 상태는 Supabase 실시간 구독 사용
- 스토어명은 `{feature}Store` 형식

### 데이터베이스 규칙
- 모든 테이블에 `id` (UUID), `created_at`, `updated_at` 필수
- 외래키는 `{table}_id` 형식
- RLS (Row Level Security) 정책 필수 설정
- 데이터베이스 함수는 `{action}_{table}` 형식

### 컴포넌트 구조 템플릿
```typescript
import React from 'react';
import { IComponentProps } from './Component.types';

const Component: React.FC<IComponentProps> = ({ prop1, prop2 }) => {
  // Hooks
  const [state, setState] = useState();
  
  // Event handlers
  const handleClick = () => {
    // Handler logic
  };
  
  // Render
  return (
    <div className="component-container">
      {/* Component JSX */}
    </div>
  );
};

export default Component;
```

### 에러 처리 규칙
- 모든 API 호출에 try-catch 사용
- 사용자 친화적인 에러 메시지 표시
- 콘솔 에러는 개발 환경에서만 출력
- 에러 바운더리 컴포넌트 구현

### 성능 최적화 규칙
- React.memo() 적절히 사용
- useMemo(), useCallback() 필요시에만 사용
- 이미지 lazy loading 필수
- 코드 분할 (React.lazy) 적용

### 접근성 규칙
- 모든 인터랙티브 요소에 적절한 ARIA 속성
- 키보드 네비게이션 지원
- 색상 대비 비율 준수
- 스크린 리더 지원

### 테스트 규칙
- 컴포넌트 테스트는 React Testing Library 사용
- 유틸리티 함수는 Jest로 테스트
- E2E 테스트는 Playwright 사용
- 테스트 파일은 `.test.tsx` 확장자

### Git 커밋 규칙
- 커밋 메시지는 영어로 작성
- 형식: `type(scope): description`
- 타입: feat, fix, docs, style, refactor, test, chore
- 예시: `feat(whiskey): add whiskey detail page`

### 보안 규칙
- 환경 변수는 `.env.local`에 저장
- API 키는 클라이언트에 노출 금지
- 사용자 입력 데이터 검증 필수
- XSS 방지를 위한 데이터 이스케이프

### PWA 규칙
- Service Worker는 오프라인 기능 지원
- 매니페스트 파일 필수 설정
- 앱 아이콘 다양한 크기 제공
- 오프라인 페이지 구현

## 개발 워크플로우

### 1. 기능 개발 순서
1. 타입 정의 작성
2. 컴포넌트 구조 설계
3. 기본 UI 구현
4. 상태 관리 연결
5. API 연동
6. 테스트 작성
7. 문서화

### 2. 코드 리뷰 체크리스트
- [ ] TypeScript 타입 정의 완료
- [ ] 컴포넌트 재사용성 고려
- [ ] 접근성 요구사항 충족
- [ ] 성능 최적화 적용
- [ ] 에러 처리 구현
- [ ] 테스트 코드 작성

### 3. 배포 전 체크리스트
- [ ] 모든 기능 테스트 완료
- [ ] 오프라인 기능 동작 확인
- [ ] 다기기 동기화 테스트
- [ ] 성능 최적화 적용
- [ ] 보안 검토 완료

## 도구 및 확장팩

### VS Code 필수 확장팩
- ES7+ React/Redux/React-Native snippets
- Tailwind CSS IntelliSense
- TypeScript Importer
- Prettier - Code formatter
- ESLint
- Auto Rename Tag
- Bracket Pair Colorizer
- GitLens

### 개발 도구
- React Developer Tools
- Redux DevTools
- Supabase Dashboard
- Vercel CLI
- Chrome DevTools

## 참고 자료
- [React 공식 문서](https://react.dev/)
- [TypeScript 핸드북](https://www.typescriptlang.org/docs/)
- [Tailwind CSS 문서](https://tailwindcss.com/docs)
- [Supabase 문서](https://supabase.com/docs)
- [Zustand 문서](https://github.com/pmndrs/zustand)
- [PWA 가이드](https://web.dev/progressive-web-apps/)
